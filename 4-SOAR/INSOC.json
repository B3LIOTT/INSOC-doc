{
  "name": "INSOC",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "7ceae612-e110-4adf-8191-95557ec9b251",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1080,
        340
      ],
      "id": "c3cdb197-ebad-40ad-b258-f183fc721815",
      "name": "Webhook",
      "webhookId": "7ceae612-e110-4adf-8191-95557ec9b251"
    },
    {
      "parameters": {
        "resource": "case",
        "operation": "create",
        "title": "=CASE - {{ $('ALERT').item.json.type }}",
        "description": "=Groups alerts with same type: {{ $('ALERT').item.json.type }}",
        "severity": "={{ $('ALERT').item.json.severity }}",
        "startDate": "={{ $('ALERT').item.json.createdAt }}",
        "owner": "user@wazuh.fr",
        "tlp": "={{ 2 }}",
        "tags": "={{ $('ALERT').item.json.type }}",
        "options": {}
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        760,
        220
      ],
      "id": "c2b7ff51-52c1-4b16-b459-99c8262004cf",
      "name": "CREATE CASE",
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "merge",
        "id": "={{ $('ALERT').item.json.id }}",
        "caseId": "={{ $json._id }}"
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        1040,
        360
      ],
      "id": "84793fff-516e-4b17-8cec-6af536e7c19d",
      "name": "MERGE TO CASE",
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "title": "={{ $json.title }}",
        "description": "={{ $json.description }}",
        "severity": "={{ $json.severity }}",
        "date": "={{ $json.date }}",
        "tags": "={{ $json.tags }}",
        "tlp": "={{ $json.severity }}",
        "status": "=New",
        "type": "={{ $json.type }}",
        "source": "={{ $json.source }}",
        "sourceRef": "={{ $json.sourceRef }}",
        "additionalFields": {
          "customFieldsJson": "={{ $json.customFields }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        160,
        340
      ],
      "id": "7062c3dc-41dd-46cb-a60e-9d4e115fb05a",
      "name": "ALERT",
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "create",
        "caseId": "={{ $('COUNTER IPs').item.json.id }}",
        "dataType": "ip",
        "data": "={{ $('COUNTER IPs').item.json.next_ip }}",
        "message": "ip",
        "startDate": "={{ $('COUNTER IPs').item.json.date }}",
        "status": "Ok",
        "options": {}
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        2520,
        0
      ],
      "id": "a9dd5a4f-5058-4100-ade7-4573384c2e92",
      "name": "ADD OBSERVABLES",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first().json;\n// data.body.agent.ip = \"34.35.36.37\"\ndata.body.malicious_ip = \"62.63.230.241\"\ndata.body.malicious_domain1 = \"http://hecker.io\"\n// data.body.malicious_domain2 = \"http://hecker2222.io\"\n\nreturn data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        340
      ],
      "id": "bc070fbe-9abc-479b-809d-0a6b766959c5",
      "name": "TEST MALICIOUS IP",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b49a9a66-a443-493c-949b-a946ef155513",
              "leftValue": "={{ $json._id }}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        460,
        340
      ],
      "id": "9bcb43e4-b11e-4bcd-ac04-df7710bd9996",
      "name": "IF CASE DO NOT EXISTS"
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "executeAnalyzer",
        "id": "={{ $json.id }}",
        "dataType": "ip",
        "analyzers": [
          "93572ea5d34d9ba2b7f9446aabf6345d::Cortex"
        ]
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        2680,
        0
      ],
      "id": "dd0c6801-161d-4f6f-85dc-e48bdb0533b0",
      "name": "EXEC ANALYZER",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75a55d45-25b0-4581-b969-297436b1588f",
              "leftValue": "={{ $json.artifacts.ips }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "lengthGt",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1860,
        160
      ],
      "id": "55da6ef7-a7bb-4fbb-858b-52edcc951e21",
      "name": "Filter IPs"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75a55d45-25b0-4581-b969-297436b1588f",
              "leftValue": "={{ $json.artifacts.urls }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "lengthGt",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1860,
        580
      ],
      "id": "c469de34-0493-469d-ae1d-c419706d5dc6",
      "name": "Filter URLs"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75a55d45-25b0-4581-b969-297436b1588f",
              "leftValue": "={{ $json.artifacts.domains }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "lengthGt",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1860,
        1040
      ],
      "id": "e5fb7537-5228-44d8-b94a-b1e6541a5e6c",
      "name": "Filter DOMAINs"
    },
    {
      "parameters": {
        "jsCode": "// Check if it's an external IP\nfunction isExternalIP(ip) {\n    const privateRanges = [\n        /^10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/,        // 10.0.0.0 - 10.255.255.255\n        /^172\\.(1[6-9]|2[0-9]|3[0-1])\\.\\d{1,3}\\.\\d{1,3}$/, // 172.16.0.0 - 172.31.255.255\n        /^192\\.168\\.\\d{1,3}\\.\\d{1,3}$/,           // 192.168.0.0 - 192.168.255.255\n        /^127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/,       // 127.0.0.0 - 127.255.255.255 (loopback)\n        /^169\\.254\\.\\d{1,3}\\.\\d{1,3}$/,           // 169.254.0.0 - 169.254.255.255 (link-local)\n        /^0\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/,         // 0.0.0.0/8 (reserved)\n        /^255\\.255\\.255\\.255$/                    // Broadcast address\n    ];\n\n    return !privateRanges.some(range => range.test(ip));\n}\n\nfunction extractArtifacts() {\n    const ipRegex = /\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/g;\n    const urlRegex = /https?:\\/\\/(?:[-\\w@:%._\\+~#=]{1,256}\\.[\\w()]{1,6}\\b(?:[-\\w()@:%_\\+.~#?&\\/=]*))/g\n\n    // Get the items array from n8n input\n    const inputArray = $input.first().json.body;\n    let artifactsDict = {};\n    artifactsDict.artifacts = {}\n\n    // Convert item to string if it's not already\n    const formatAlt = JSON.stringify(inputArray, null, 2);\n\n    const allIps = formatAlt.match(ipRegex) || [];\n    artifactsDict.artifacts.ips = allIps.filter(isExternalIP); // Get only external IPs\n    artifactsDict.artifacts.urls = formatAlt.match(urlRegex) || [];\n\n    // Extract domains from URLs using simple string manipulation\n    artifactsDict.artifacts.domains = artifactsDict.artifacts.urls.map(url => {\n    // Remove protocol (http:// or https://)\n    let domain = url.split('//')[1];\n    // Get the domain part (everything before the first slash)\n    domain = domain.split('/')[0];\n    // Remove port if present\n    domain = domain.split(':')[0];\n    return domain;\n    });\n\n    return artifactsDict;\n}\n\n\n// Input data\nconst data = $input.first().json;\n\nconst dict = extractArtifacts();\ndata.body = dict;\ndata.body.counter_ips = dict.artifacts.ips.length;\ndata.body.counter_urls = dict.artifacts.urls.length;\ndata.body.counter_domains = dict.artifacts.domains.length;\n\nreturn { json: data.body };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -540,
        600
      ],
      "id": "b9c8db55-b7fd-4863-ab16-1c2cf22a618b",
      "name": "Artifacts detection"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1600,
        580
      ],
      "id": "dd8795a8-fd6a-46de-a64d-7a3e6cc702f3",
      "name": "Merge"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "return {\n  'id': _input.first().json.id,\n  'date': _input.first().json.createdAt\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        360
      ],
      "id": "fab0039f-c526-4d82-858c-5d5cff0fc6db",
      "name": "CASE ID"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "counter = _input.first().json.counter_urls - 1\n_input.first().json.counter_urls = counter\nnext_url = _input.first().json.artifacts.urls[counter]\n\nreturn dict(_input.first().json) | {'next_url': next_url}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2060,
        580
      ],
      "id": "e1fe4a6a-cd2b-4971-8f7e-bba496200d23",
      "name": "COUNTER URLs"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "counter = _input.first().json.counter_ips - 1\n_input.first().json.counter_ips = counter\nnext_ip = _input.first().json.artifacts.ips[counter]\n\nreturn dict(_input.first().json) | {'next_ip': next_ip}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2080,
        160
      ],
      "id": "a91abff5-0ef1-46f5-896e-04a1f4c8c35f",
      "name": "COUNTER IPs"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "counter = _input.first().json.counter_domains - 1\n_input.first().json.counter_domains = counter\nnext_domain = _input.first().json.artifacts.domains[counter]\n\nreturn dict(_input.first().json) | {'next_domain': next_domain}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2040,
        1040
      ],
      "id": "d6a239eb-1308-4897-bdec-cb7958abf23b",
      "name": "COUNTER DOMAINs"
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "count",
        "filters": {
          "data": "={{ $json.next_ip }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        2240,
        0
      ],
      "id": "0d49b443-d9da-4dd1-8fbb-626a6d10c0d2",
      "name": "OBSERVABLE EXISTS",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "564ff8c5-fd5d-4a58-a8c6-388eddd34b74",
              "leftValue": "={{ $json.counter_ips }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3000,
        160
      ],
      "id": "baf52353-a3f0-4e82-9efa-d137d166934f",
      "name": "loop condition"
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "create",
        "caseId": "={{ $('COUNTER URLs').item.json.id }}",
        "dataType": "url",
        "data": "={{ $('COUNTER URLs').item.json.next_url }}",
        "message": "url",
        "startDate": "={{ $('COUNTER URLs').item.json.date }}",
        "status": "Ok",
        "options": {}
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        2520,
        460
      ],
      "id": "8aa71791-d18d-4c4e-b820-c6903586b339",
      "name": "ADD OBSERVABLES1",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "executeAnalyzer",
        "id": "={{ $json.id }}",
        "dataType": "url",
        "analyzers": [
          "d33efdda2d1f2aca7f2c06f71d9f8578::Cortex"
        ]
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        2680,
        460
      ],
      "id": "3d5dd300-6f33-41fe-9267-dcc87fa98d23",
      "name": "EXEC ANALYZER1",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "count",
        "filters": {
          "data": "={{ $json.next_url }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        2240,
        460
      ],
      "id": "e513e2ff-7c62-45ad-9a7b-1311f07037ce",
      "name": "OBSERVABLE EXISTS1",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "564ff8c5-fd5d-4a58-a8c6-388eddd34b74",
              "leftValue": "={{ $json.counter_urls }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2980,
        580
      ],
      "id": "20b00252-b4ea-4b3d-bf64-d2d8e3f7e568",
      "name": "loop condition1"
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "create",
        "caseId": "={{ $('COUNTER DOMAINs').item.json.id }}",
        "dataType": "domain",
        "data": "={{ $('COUNTER DOMAINs').item.json.next_domain }}",
        "message": "domain",
        "startDate": "={{ $('COUNTER DOMAINs').item.json.date }}",
        "status": "Ok",
        "options": {}
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        2540,
        900
      ],
      "id": "e320e45c-2a22-4e68-af24-2a780613dbc3",
      "name": "ADD OBSERVABLES2",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "count",
        "filters": {
          "data": "={{ $json.next_domain }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        2220,
        900
      ],
      "id": "509fd537-b728-4ff8-a39e-ed9d7ccacb06",
      "name": "OBSERVABLE EXISTS2",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "564ff8c5-fd5d-4a58-a8c6-388eddd34b74",
              "leftValue": "={{ $json.counter_domains }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2980,
        1040
      ],
      "id": "03edf511-a915-4c14-b73b-17d91377c191",
      "name": "loop condition2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5b092e62-cde5-4e65-b612-1d88c03fc8ff",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2380,
        0
      ],
      "id": "26cf5364-09a1-40fb-ae87-2d6a89c9b040",
      "name": "Filter"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5b092e62-cde5-4e65-b612-1d88c03fc8ff",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2380,
        460
      ],
      "id": "c0bb31bf-f05d-41e4-988b-de94757b2baf",
      "name": "Filter1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5b092e62-cde5-4e65-b612-1d88c03fc8ff",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2380,
        900
      ],
      "id": "3a1823e4-e7da-4cc9-b41c-6bd0d29d1c1a",
      "name": "Filter2"
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "executeAnalyzer",
        "id": "={{ $json.id }}",
        "dataType": "domain",
        "analyzers": [
          "d33efdda2d1f2aca7f2c06f71d9f8578::Kifarunix-demo Cortex"
        ]
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        2720,
        900
      ],
      "id": "282f2817-e0f8-4bed-b0ac-bb39e47dc889",
      "name": "EXEC ANALYZER2",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $('TEST MALICIOUS IP').first().json.body"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        340
      ],
      "id": "67941e08-fe5a-4c23-b6b3-c2c74b906118",
      "name": "REFORMAT"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "return _input.first()"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        140,
        0
      ],
      "id": "2c45b6cb-99e9-4200-8c41-29fd58516f9b",
      "name": "first"
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 1,
        "options": {},
        "filters": {
          "title": "={{ $json.body.title }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "9941d291-05b1-4df4-9e0e-db6d53c30fd0",
      "name": "GET ALERT1",
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "case",
        "limit": 1,
        "options": {},
        "filters": {
          "tags": "={{ $('ALERT').item.json.type }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        300,
        340
      ],
      "id": "df370276-7847-42b2-9bf7-8f63e48fffe5",
      "name": "GET CASE1",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "markAsUnread",
        "id": "={{ $json._id }}"
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        300,
        0
      ],
      "id": "b450f5b4-182b-4f06-a363-6ed1bb4d3968",
      "name": "UPDATE (todo)",
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.7.15:9000/api/v1/query",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "theHiveApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n    query: [\n      {\n        _name: \"listAlert\"\n      },\n      {\n        _name: \"filter\",\n        _and: [\n          {\n            _field: \"customFields.hash\",\n            _value: $(\"TEST MALICIOUS IP\").item.json.body.customFields.hash\n          },\n          {\n            _field: \"title\",\n            _value: $(\"TEST MALICIOUS IP\").item.json.body.title\n          }\n        ]\n      },\n      {\n        _name: \"page\",\n        from: 0,\n        to: 1\n      }\n    ]\n  } }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -400,
        180
      ],
      "id": "dfaa3ea8-9661-4a71-90c8-1c75119792b8",
      "name": "GET BY TITLE",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "case",
        "operation": "update",
        "id": "={{ $json.id }}",
        "updateFields": {
          "tags": "={{ $('ALERT').item.json.type }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        1200,
        360
      ],
      "id": "d7107ad9-e780-4990-865d-d206f3637647",
      "name": "TAGS",
      "credentials": {
        "theHiveApi": {
          "id": "00AEKmgC9Jko6kJB",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const X = 5;  // X min ago\nconst tma = new Date(Date.now() - X * 60 * 1000)\nconst tmaTimestamp = Math.floor(tma.getTime() / 1000); // Timestamp en secondes (int)\nreturn {\"XMinAgo\": tmaTimestamp}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -540,
        180
      ],
      "id": "b8835a1d-3c7b-4de1-86ce-6ce3d231de83",
      "name": "Timestamp Xmin ago"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b45aebd3-9c7f-493f-8066-df9909439043",
              "leftValue": "={{ $json._id }}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "5069a481-ed48-4eb2-951a-b0d9417e9c49",
              "leftValue": "={{ $json.date }}",
              "rightValue": "={{ $('Timestamp Xmin ago').item.json['XMinAgo'] }}",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -260,
        180
      ],
      "id": "f086c665-a891-4034-9040-7c6b18127d82",
      "name": "EXISTS within last Xmin"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "TEST MALICIOUS IP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CREATE CASE": {
      "main": [
        [
          {
            "node": "MERGE TO CASE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ALERT": {
      "main": [
        [
          {
            "node": "GET CASE1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TEST MALICIOUS IP": {
      "main": [
        [
          {
            "node": "Artifacts detection",
            "type": "main",
            "index": 0
          },
          {
            "node": "Timestamp Xmin ago",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MERGE TO CASE": {
      "main": [
        [
          {
            "node": "TAGS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADD OBSERVABLES": {
      "main": [
        [
          {
            "node": "EXEC ANALYZER",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF CASE DO NOT EXISTS": {
      "main": [
        [
          {
            "node": "CREATE CASE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "MERGE TO CASE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter IPs": {
      "main": [
        [
          {
            "node": "COUNTER IPs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter URLs": {
      "main": [
        [
          {
            "node": "COUNTER URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter DOMAINs": {
      "main": [
        [
          {
            "node": "COUNTER DOMAINs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Artifacts detection": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Filter IPs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CASE ID": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "COUNTER IPs": {
      "main": [
        [
          {
            "node": "OBSERVABLE EXISTS",
            "type": "main",
            "index": 0
          },
          {
            "node": "loop condition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OBSERVABLE EXISTS": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "loop condition": {
      "main": [
        [],
        [
          {
            "node": "COUNTER IPs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADD OBSERVABLES1": {
      "main": [
        [
          {
            "node": "EXEC ANALYZER1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OBSERVABLE EXISTS1": {
      "main": [
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "loop condition1": {
      "main": [
        [],
        [
          {
            "node": "COUNTER URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADD OBSERVABLES2": {
      "main": [
        [
          {
            "node": "EXEC ANALYZER2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OBSERVABLE EXISTS2": {
      "main": [
        [
          {
            "node": "Filter2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "loop condition2": {
      "main": [
        [],
        [
          {
            "node": "COUNTER DOMAINs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "COUNTER URLs": {
      "main": [
        [
          {
            "node": "OBSERVABLE EXISTS1",
            "type": "main",
            "index": 0
          },
          {
            "node": "loop condition1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "COUNTER DOMAINs": {
      "main": [
        [
          {
            "node": "OBSERVABLE EXISTS2",
            "type": "main",
            "index": 0
          },
          {
            "node": "loop condition2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "ADD OBSERVABLES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "ADD OBSERVABLES1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter2": {
      "main": [
        [
          {
            "node": "ADD OBSERVABLES2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "REFORMAT": {
      "main": [
        [
          {
            "node": "ALERT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "first": {
      "main": [
        [
          {
            "node": "UPDATE (todo)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET ALERT1": {
      "main": [
        [
          {
            "node": "first",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET CASE1": {
      "main": [
        [
          {
            "node": "IF CASE DO NOT EXISTS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET BY TITLE": {
      "main": [
        [
          {
            "node": "EXISTS within last Xmin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TAGS": {
      "main": [
        [
          {
            "node": "CASE ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Timestamp Xmin ago": {
      "main": [
        [
          {
            "node": "GET BY TITLE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EXISTS within last Xmin": {
      "main": [
        [
          {
            "node": "GET ALERT1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "REFORMAT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "51fdfe31-db96-4539-9202-e6e12bf54af9",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "089593b0375f52cffd2e682594e43cdd96459883230a04bef809490471c267bb"
  },
  "id": "uS7ARgLZrmzu7ZLf",
  "tags": []
}