{
  "name": "INSOC",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "7ceae612-e110-4adf-8191-95557ec9b251",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2440,
        340
      ],
      "id": "603d5723-e3b9-49ab-b847-ee448feb55f3",
      "name": "Webhook",
      "webhookId": "7ceae612-e110-4adf-8191-95557ec9b251"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bead66af-9be4-4285-8dd0-fb9cdad3743c",
              "leftValue": "={{ $json.body.rule.level }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -2180,
        340
      ],
      "id": "d6d84aea-2115-4de4-b80f-94a51807f1dc",
      "name": ">=MEDIUM alerts filter"
    },
    {
      "parameters": {
        "resource": "case",
        "operation": "create",
        "title": "=CASE - {{ $('ALERT').item.json.tags.join(',') }}",
        "description": "=Groups alerts with same tags: {{ $('ALERT').item.json.tags.join(',') }}",
        "severity": "={{ $('ALERT').item.json.severity }}",
        "startDate": "={{ $('ALERT').item.json.createdAt }}",
        "owner": "user@wazuh.fr",
        "tlp": "={{ 2 }}",
        "tags": "={{ $('ALERT').item.json.tags.join(',') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        -1180,
        240
      ],
      "id": "ed18ad34-d593-46f4-a3bb-f0fbbdc8f628",
      "name": "CREATE CASE",
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "merge",
        "id": "={{ $('ALERT').item.json.id }}",
        "caseId": "={{ $json._id }}"
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        -1040,
        460
      ],
      "id": "3b334b65-9355-4949-adc8-5860aea673ad",
      "name": "MERGE TO CASE",
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "case",
        "operation": "count",
        "filters": {
          "severity": "={{ $json.severity }}",
          "tags": "={{ $json.tags.join(',') }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        -1540,
        340
      ],
      "id": "5f23d72d-d6a4-4355-a5b0-9580435946c1",
      "name": "CASE EXISTS",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "case",
        "limit": 1,
        "options": {},
        "filters": {
          "tags": "={{ $('ALERT').item.json.tags[0] }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        -1180,
        460
      ],
      "id": "b6085e47-052e-43f7-92d6-dde3b50d3691",
      "name": "GET CASE",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "1202999965455097866",
          "mode": "list",
          "cachedResultName": "Serveur de Otter Tech",
          "cachedResultUrl": "https://discord.com/channels/1202999965455097866"
        },
        "channelId": {
          "__rl": true,
          "value": "1331219141662871582",
          "mode": "list",
          "cachedResultName": "soc",
          "cachedResultUrl": "https://discord.com/channels/1202999965455097866/1331219141662871582"
        },
        "content": "=/!\\ ALERTE DE NIVEAU 3\n-----------------------------\nTitre: {{ $json.body.content[0].title }}\nDesc: {{ $json.body.content[0].description }}\nIP source: {{ $json.body.content[0].fields[0].source }}\n------------------------------",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1080,
        440
      ],
      "id": "d2a0331c-b3d6-4148-b790-8134afe4f7ee",
      "name": "Discord"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# creates a uuid for each alert\nimport uuid\n\ndata = _input.first().json.body\ndata.sourceRef = str(uuid.uuid4())\nreturn data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1900,
        340
      ],
      "id": "57fbacec-3e57-4c27-bb79-dcb45ec05a8a",
      "name": "uuid"
    },
    {
      "parameters": {
        "title": "={{ $json.rule.description }}",
        "description": "=Alert from - {{ $json.agent.name }}",
        "severity": "={{ $json.rule.level }}",
        "date": "={{ $json.timestamp }}",
        "tags": "={{ $json.rule.groups.join(',') }}",
        "tlp": "={{ $json.rule.level }}",
        "type": "={{ $json.rule.id }}",
        "source": "={{ $json.agent.ip }}",
        "sourceRef": "=alert-{{ $json.sourceRef }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        -1680,
        340
      ],
      "id": "f0a16049-dbd9-4028-a859-6cb018af1b72",
      "name": "ALERT",
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "create",
        "caseId": "={{ $('COUNTER IPs').item.json.id }}",
        "dataType": "ip",
        "data": "={{ $('COUNTER IPs').item.json.next_ip }}",
        "message": "ip",
        "startDate": "={{ $('COUNTER IPs').item.json.date }}",
        "status": "Ok",
        "options": {}
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        280,
        0
      ],
      "id": "b4bbc849-bee1-4ea5-9dbc-d9334de1c57a",
      "name": "ADD OBSERVABLES",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first().json;\ndata.body.agent.ip = \"34.35.36.37\"\ndata.body.malicious_ip = \"62.63.230.241\"\ndata.body.malicious_domain1 = \"http://hecker.io\"\ndata.body.malicious_domain2 = \"http://hecker2222.io\"\n\nreturn data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2320,
        560
      ],
      "id": "05992c9b-b0d0-471b-9153-32ac96e0c8cb",
      "name": "TEST MALICIOUS IP"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b49a9a66-a443-493c-949b-a946ef155513",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1380,
        340
      ],
      "id": "b446eb33-3353-499a-ab08-00fe8857dd47",
      "name": "IF CASE DO NOT EXISTS"
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "executeAnalyzer",
        "id": "={{ $json.id }}",
        "dataType": "ip",
        "analyzers": [
          "0264c5f6f3d1d841605bedcefe9f31d8::Cortex"
        ]
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        440,
        0
      ],
      "id": "6348537c-1170-4085-af03-5de8b5f4d09c",
      "name": "EXEC ANALYZER",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75a55d45-25b0-4581-b969-297436b1588f",
              "leftValue": "={{ $json.artifacts.ips }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "lengthGt",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -380,
        160
      ],
      "id": "fc6f01c4-c1de-4d51-8689-e831b27ed2be",
      "name": "Filter IPs"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75a55d45-25b0-4581-b969-297436b1588f",
              "leftValue": "={{ $json.artifacts.urls }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "lengthGt",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -380,
        580
      ],
      "id": "27043119-53ea-4250-bf91-85986f8cf43e",
      "name": "Filter URLs"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75a55d45-25b0-4581-b969-297436b1588f",
              "leftValue": "={{ $json.artifacts.domains }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "lengthGt",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -380,
        980
      ],
      "id": "4167d926-96c9-4cb3-83b1-e7081e4d23a0",
      "name": "Filter DOMAINs"
    },
    {
      "parameters": {
        "jsCode": "// Check if it's an external IP\nfunction isExternalIP(ip) {\n    const privateRanges = [\n        /^10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/,        // 10.0.0.0 - 10.255.255.255\n        /^172\\.(1[6-9]|2[0-9]|3[0-1])\\.\\d{1,3}\\.\\d{1,3}$/, // 172.16.0.0 - 172.31.255.255\n        /^192\\.168\\.\\d{1,3}\\.\\d{1,3}$/,           // 192.168.0.0 - 192.168.255.255\n        /^127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/,       // 127.0.0.0 - 127.255.255.255 (loopback)\n        /^169\\.254\\.\\d{1,3}\\.\\d{1,3}$/,           // 169.254.0.0 - 169.254.255.255 (link-local)\n        /^0\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/,         // 0.0.0.0/8 (reserved)\n        /^255\\.255\\.255\\.255$/                    // Broadcast address\n    ];\n\n    return !privateRanges.some(range => range.test(ip));\n}\n\nfunction extractArtifacts() {\n    const ipRegex = /\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/g;\n    const urlRegex = /https?:\\/\\/(?:[-\\w@:%._\\+~#=]{1,256}\\.[\\w()]{1,6}\\b(?:[-\\w()@:%_\\+.~#?&\\/=]*))/g\n\n    // Get the items array from n8n input\n    const inputArray = $input.first().json.body;\n    let artifactsDict = {};\n    artifactsDict.artifacts = {}\n\n    // Convert item to string if it's not already\n    const formatAlt = JSON.stringify(inputArray, null, 2);\n\n    const allIps = formatAlt.match(ipRegex) || [];\n    artifactsDict.artifacts.ips = allIps.filter(isExternalIP); // Get only external IPs\n    artifactsDict.artifacts.urls = formatAlt.match(urlRegex) || [];\n\n    // Extract domains from URLs using simple string manipulation\n    artifactsDict.artifacts.domains = artifactsDict.artifacts.urls.map(url => {\n    // Remove protocol (http:// or https://)\n    let domain = url.split('//')[1];\n    // Get the domain part (everything before the first slash)\n    domain = domain.split('/')[0];\n    // Remove port if present\n    domain = domain.split(':')[0];\n    return domain;\n    });\n\n    return artifactsDict;\n}\n\n\n// Input data\nconst data = $input.first().json;\n\nconst dict = extractArtifacts();\ndata.body = dict;\ndata.body.counter_ips = dict.artifacts.ips.length;\ndata.body.counter_urls = dict.artifacts.urls.length;\ndata.body.counter_domains = dict.artifacts.domains.length;\n\nreturn { json: data.body };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1700,
        600
      ],
      "id": "bb3153cb-0b32-421f-9a7b-3aca71ae1868",
      "name": "Artifacts detection"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -700,
        580
      ],
      "id": "1a04bf3a-0b30-4abd-a864-e61ad6444d7b",
      "name": "Merge"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "return {\n  'id': _input.first().json.id,\n  'date': _input.first().json.createdAt\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        460
      ],
      "id": "48a10231-8bba-4b8a-a3da-9dfe7df6038c",
      "name": "CASE ID"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "counter = _input.first().json.counter_urls - 1\n_input.first().json.counter_urls = counter\nnext_url = _input.first().json.artifacts.urls[counter]\n\nreturn dict(_input.first().json) | {'next_url': next_url}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -180,
        580
      ],
      "id": "3945dd40-66ea-4043-be53-7ad107bec418",
      "name": "COUNTER URLs"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "counter = _input.first().json.counter_ips - 1\n_input.first().json.counter_ips = counter\nnext_ip = _input.first().json.artifacts.ips[counter]\n\nreturn dict(_input.first().json) | {'next_ip': next_ip}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        160
      ],
      "id": "37199207-4082-4bd6-9815-dfe952033ada",
      "name": "COUNTER IPs"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "counter = _input.first().json.counter_domains - 1\n_input.first().json.counter_domains = counter\nnext_domain = _input.first().json.artifacts.domains[counter]\n\nreturn dict(_input.first().json) | {'next_domain': next_domain}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -200,
        980
      ],
      "id": "40dfc4ef-38a3-415c-b53b-07bffa0b1322",
      "name": "COUNTER DOMAINs"
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "count",
        "filters": {
          "data": "={{ $json.next_ip }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "ff6aaed9-7899-4fbb-b599-7731842801a0",
      "name": "OBSERVABLE EXISTS",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "564ff8c5-fd5d-4a58-a8c6-388eddd34b74",
              "leftValue": "={{ $json.counter_ips }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        760,
        160
      ],
      "id": "41507e72-723d-49b8-b83b-be4bc45cc42b",
      "name": "loop condition"
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "create",
        "caseId": "={{ $('COUNTER URLs').item.json.id }}",
        "dataType": "ip",
        "data": "={{ $('COUNTER URLs').item.json.next_url }}",
        "message": "ip",
        "startDate": "={{ $('COUNTER URLs').item.json.date }}",
        "status": "Ok",
        "options": {}
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        280,
        460
      ],
      "id": "12998b35-06f3-4140-9541-c0405863c0d9",
      "name": "ADD OBSERVABLES1",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "executeAnalyzer",
        "id": "={{ $json.id }}",
        "dataType": "url",
        "analyzers": [
          "0264c5f6f3d1d841605bedcefe9f31d8::Cortex"
        ]
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        440,
        460
      ],
      "id": "56182b01-35eb-456d-af2d-1797f1f1bb2d",
      "name": "EXEC ANALYZER1",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "count",
        "filters": {
          "data": "={{ $json.next_url }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        0,
        460
      ],
      "id": "e2884b57-9fe4-4a22-b3c2-2d488799550f",
      "name": "OBSERVABLE EXISTS1",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "564ff8c5-fd5d-4a58-a8c6-388eddd34b74",
              "leftValue": "={{ $json.counter_urls }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        740,
        580
      ],
      "id": "f13dc59f-5d4f-4eae-bea5-7a30f57223b1",
      "name": "loop condition1"
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "create",
        "caseId": "={{ $('COUNTER DOMAINs').item.json.id }}",
        "dataType": "ip",
        "data": "={{ $('COUNTER DOMAINs').item.json.next_domain }}",
        "message": "ip",
        "startDate": "={{ $('COUNTER DOMAINs').item.json.date }}",
        "status": "Ok",
        "options": {}
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        300,
        840
      ],
      "id": "f4fd843a-094f-4c2b-96d8-7601aa7bac90",
      "name": "ADD OBSERVABLES2",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "executeAnalyzer",
        "id": "={{ $json.id }}",
        "dataType": "domain",
        "analyzers": [
          "0264c5f6f3d1d841605bedcefe9f31d8::Cortex"
        ]
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        460,
        840
      ],
      "id": "186aef18-57a3-41cd-9f08-63c618e63c07",
      "name": "EXEC ANALYZER2",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "observable",
        "operation": "count",
        "filters": {
          "data": "={{ $json.next_domain }}"
        }
      },
      "type": "n8n-nodes-base.theHive",
      "typeVersion": 1,
      "position": [
        -20,
        840
      ],
      "id": "3eabc2e2-819d-4346-9efa-40f80d65184b",
      "name": "OBSERVABLE EXISTS2",
      "alwaysOutputData": true,
      "credentials": {
        "theHiveApi": {
          "id": "ZvwqrB92gWkXhSTj",
          "name": "The Hive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "564ff8c5-fd5d-4a58-a8c6-388eddd34b74",
              "leftValue": "={{ $json.counter_domains }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        740,
        980
      ],
      "id": "df299698-8998-487b-a1d9-5a7efbdebe7c",
      "name": "loop condition2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5b092e62-cde5-4e65-b612-1d88c03fc8ff",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        140,
        0
      ],
      "id": "09976e85-f5b8-4b96-8c74-e8e8b26b6b78",
      "name": "Filter"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5b092e62-cde5-4e65-b612-1d88c03fc8ff",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        140,
        460
      ],
      "id": "cec5ccc4-9e0a-46f8-a1ce-a6a1bbaf919b",
      "name": "Filter1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5b092e62-cde5-4e65-b612-1d88c03fc8ff",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        140,
        840
      ],
      "id": "130f0bce-937e-4079-bdb5-f11570545b5e",
      "name": "Filter2"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "192.168.1.42:5678",
            "user-agent": "python-requests/2.32.2",
            "accept-encoding": "gzip, deflate",
            "accept": "*/*",
            "connection": "keep-alive",
            "content-type": "application/json",
            "content-length": "5388"
          },
          "params": {},
          "query": {},
          "body": {
            "timestamp": "2025-01-21T19:35:06.328+0000",
            "rule": {
              "level": 1,
              "description": "Windows Logon Success",
              "id": "60106",
              "mitre": {
                "id": [
                  "T1078"
                ],
                "tactic": [
                  "Defense Evasion",
                  "Persistence",
                  "Privilege Escalation",
                  "Initial Access"
                ],
                "technique": [
                  "Valid Accounts"
                ]
              },
              "firedtimes": 2,
              "mail": false,
              "groups": [
                "windows",
                "windows_security",
                "authentication_success"
              ],
              "pci_dss": [
                "10.2.5"
              ],
              "gpg13": [
                "7.1",
                "7.2"
              ],
              "gdpr": [
                "IV_32.2"
              ],
              "hipaa": [
                "164.312.b"
              ],
              "nist_800_53": [
                "AU.14",
                "AC.9"
              ],
              "tsc": [
                "CC6.8",
                "CC7.2",
                "CC7.3"
              ]
            },
            "agent": {
              "id": "001",
              "name": "LAPTOP-OD44SO50",
              "ip": "192.168.1.42"
            },
            "manager": {
              "name": "wazuh"
            },
            "id": "1737488106.15794540",
            "decoder": {
              "name": "windows_eventchannel"
            },
            "data": {
              "win": {
                "system": {
                  "providerName": "Microsoft-Windows-Security-Auditing",
                  "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}",
                  "eventID": "4624",
                  "version": "3",
                  "level": "0",
                  "task": "12544",
                  "opcode": "0",
                  "keywords": "0x8020000000000000",
                  "systemTime": "2025-01-21T19:35:05.2035092Z",
                  "eventRecordID": "2080406",
                  "processID": "1140",
                  "threadID": "12972",
                  "channel": "Security",
                  "computer": "LAPTOP-OD44SO50",
                  "severityValue": "AUDIT_SUCCESS",
                  "message": "\"L'ouverture de session d'un compte s'est correctement déroulée.\r\n\r\nObjet :\r\n\tID de sécurité :\t\tS-1-5-18\r\n\tNom du compte :\t\tLAPTOP-OD44SO50$\r\n\tDomaine du compte :\t\tWORKGROUP\r\n\tID d'ouverture de session :\t\t0x3E7\r\n\r\nInformations d'ouverture de session :\r\n\tType d'ouverture de session :\t\t5\r\n\tMode administrateur restreint :\t-\r\n\tCredential Guard à distance :\t-\r\n\tCompte virtuel :\t\tNon\r\n\tJeton élevé :\t\tOui\r\n\r\nNiveau d'emprunt d'identité :\t\tEmprunt d’identité\r\n\r\nNouvelle ouverture de session :\r\n\tID de sécurité :\t\tS-1-5-18\r\n\tNom du compte :\t\tSystème\r\n\tDomaine du compte :\t\tAUTORITE NT\r\n\tID d'ouverture de session :\t\t0x3E7\r\n\tID d'ouverture de session liée :\t\t0x0\r\n\tNom du compte réseau :\t-\r\n\tDomaine du compte réseau :\t-\r\n\tGUID d'ouverture de session :\t\t{00000000-0000-0000-0000-000000000000}\r\n\r\nInformations sur le processus :\r\n\tID du processus :\t\t0x410\r\n\tNom du processus :\t\tC:\\Windows\\System32\\services.exe\r\n\r\nInformations sur le réseau :\r\n\tNom de la station de travail :\t-\r\n\tAdresse du réseau source :\t-\r\n\tPort source :\t\t-\r\n\r\nInformations détaillées sur l'authentification :\r\n\tProcessus d'ouverture de session :\t\tAdvapi  \r\n\tPackage d'authentification :\tNegotiate\r\n\tServices en transit :\t-\r\n\tNom du package (NTLM uniquement) :\t-\r\n\tLongueur de la clé :\t\t0\r\n\r\nCet événement est généré lors de la création d'une ouverture de session. Il est généré sur l'ordinateur sur lequel l'ouverture de session a été effectuée.\r\n\r\nLe champ Objet indique le compte sur le système local qui a demandé l'ouverture de session. Il s'agit le plus souvent d'un service, comme le service Serveur, ou un processus local tel que Winlogon.exe ou Services.exe.\r\n\r\nLe champ Type d'ouverture de session indique le type d'ouverture de session qui s'est produit. Les types les plus courants sont 2 (interactif) et 3 (réseau).\r\n\r\nLe champ Nouvelle ouverture de session indique le compte pour lequel la nouvelle ouverture de session a été créée, par exemple, le compte qui s'est connecté.\r\n\r\nLes champs relatifs au réseau indiquent la provenance d'une demande d'ouverture de session à distance. Le nom de la station de travail n'étant pas toujours disponible, peut être laissé vide dans certains cas.\r\n\r\nLe champ du niveau d'emprunt d'identité indique la portée de l'emprunt d'identité que peut prendre un processus dans la session d'ouverture de session.\r\n\r\nLes champs relatifs aux informations d'authentification fournissent des détails sur cette demande d'ouverture de session spécifique.\r\n\t- Le GUID d'ouverture de session est un identificateur unique pouvant servir à associer cet événement à un événement KDC .\r\n\t- Les services en transit indiquent les services intermédiaires qui ont participé à cette demande d'ouverture de session.\r\n\t- Nom du package indique quel est le sous-protocole qui a été utilisé parmi les protocoles NTLM.\r\n\t- La longueur de la clé indique la longueur de la clé de session générée. Elle a la valeur 0 si aucune clé de session n'a été demandée.\""
                },
                "eventdata": {
                  "subjectUserSid": "S-1-5-18",
                  "subjectUserName": "LAPTOP-OD44SO50$",
                  "subjectDomainName": "WORKGROUP",
                  "subjectLogonId": "0x3e7",
                  "targetUserSid": "S-1-5-18",
                  "targetUserName": "Système",
                  "targetDomainName": "AUTORITE NT",
                  "targetLogonId": "0x3e7",
                  "logonType": "5",
                  "logonProcessName": "Advapi",
                  "authenticationPackageName": "Negotiate",
                  "logonGuid": "{00000000-0000-0000-0000-000000000000}",
                  "keyLength": "0",
                  "processId": "0x410",
                  "processName": "C:\\\\Windows\\\\System32\\\\services.exe",
                  "impersonationLevel": "%%1833",
                  "virtualAccount": "%%1843",
                  "targetLinkedLogonId": "0x0",
                  "elevatedToken": "%%1842"
                }
              }
            },
            "location": "EventChannel"
          },
          "webhookUrl": "http://192.168.1.42:5678/webhook-test/7ceae612-e110-4adf-8191-95557ec9b251",
          "executionMode": "test"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "TEST MALICIOUS IP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    ">=MEDIUM alerts filter": {
      "main": [
        [
          {
            "node": "uuid",
            "type": "main",
            "index": 0
          },
          {
            "node": "Artifacts detection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CASE EXISTS": {
      "main": [
        [
          {
            "node": "IF CASE DO NOT EXISTS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET CASE": {
      "main": [
        [
          {
            "node": "MERGE TO CASE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CREATE CASE": {
      "main": [
        [
          {
            "node": "CASE ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "uuid": {
      "main": [
        [
          {
            "node": "ALERT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ALERT": {
      "main": [
        [
          {
            "node": "CASE EXISTS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TEST MALICIOUS IP": {
      "main": [
        [
          {
            "node": ">=MEDIUM alerts filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MERGE TO CASE": {
      "main": [
        [
          {
            "node": "CASE ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADD OBSERVABLES": {
      "main": [
        [
          {
            "node": "EXEC ANALYZER",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF CASE DO NOT EXISTS": {
      "main": [
        [
          {
            "node": "CREATE CASE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GET CASE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter IPs": {
      "main": [
        [
          {
            "node": "COUNTER IPs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter URLs": {
      "main": [
        [
          {
            "node": "COUNTER URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter DOMAINs": {
      "main": [
        [
          {
            "node": "COUNTER DOMAINs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Artifacts detection": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Filter IPs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter URLs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter DOMAINs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CASE ID": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "COUNTER IPs": {
      "main": [
        [
          {
            "node": "OBSERVABLE EXISTS",
            "type": "main",
            "index": 0
          },
          {
            "node": "loop condition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OBSERVABLE EXISTS": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "loop condition": {
      "main": [
        [],
        [
          {
            "node": "COUNTER IPs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADD OBSERVABLES1": {
      "main": [
        [
          {
            "node": "EXEC ANALYZER1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OBSERVABLE EXISTS1": {
      "main": [
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "loop condition1": {
      "main": [
        [],
        [
          {
            "node": "COUNTER URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADD OBSERVABLES2": {
      "main": [
        [
          {
            "node": "EXEC ANALYZER2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OBSERVABLE EXISTS2": {
      "main": [
        [
          {
            "node": "Filter2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "loop condition2": {
      "main": [
        [],
        [
          {
            "node": "COUNTER DOMAINs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "COUNTER URLs": {
      "main": [
        [
          {
            "node": "OBSERVABLE EXISTS1",
            "type": "main",
            "index": 0
          },
          {
            "node": "loop condition1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "COUNTER DOMAINs": {
      "main": [
        [
          {
            "node": "OBSERVABLE EXISTS2",
            "type": "main",
            "index": 0
          },
          {
            "node": "loop condition2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "ADD OBSERVABLES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "ADD OBSERVABLES1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter2": {
      "main": [
        [
          {
            "node": "ADD OBSERVABLES2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b002f47d-73d4-4e08-ab99-0d0df4379730",
  "meta": {
    "instanceId": "6baf55508b4d196099e1f2124d31a760de61089e8e377d4d375be8f05dffdd2b"
  },
  "id": "mfYmPbdgLripvxNA",
  "tags": []
}